---
version: '3.6'

{% import "macros.jinja" as macros with context %}

{% if monitoring == "elk" %}
x-redis-def:
  &redis-def
  image: redis:alpine

x-elasticsearch-def:
  &elasticsearch-def
  build: ./elasticsearch
  environment:
    - bootstrap.memory_lock=true
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    - "http.host=0.0.0.0"
    - "transport.host=127.0.0.1"
  ulimits:
    memlock:
      soft: -1
      hard: -1
    nofile:
      soft: 65536
      hard: 65536
  cap_add:
    - IPC_LOCK

x-kibana-def:
  &kibana-def
  image: docker.elastic.co/kibana/kibana:7.9.3
  environment:
    ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    XPACK_MONITORING_ENABLED: "true"
    XPACK_MONITORING_COLLECTION_ENABLED: "true"
    SERVER_NAME: "localhost"
  depends_on:
    - elasticsearch
  links:
    - elasticsearch
  ports:
    - 5601:5601/tcp

x-logstash-def:
  &logstash-def
  build: ./logstash
  environment:
    - ES_HOST=http://elasticsearch:9200
    - REDIS_HOST=redis
    - REDIS_PORT=6379
  depends_on:
    - redis
    - elasticsearch
  links:
    - redis
    - elasticsearch

x-filebeat-def:
  &filebeat-def
  build: ./filebeat
  environment:
    - ENV_NAME=dev
    - IP_ADDRESS=127.0.0.1
    - REDIS_HOST=redis
    - REDIS_PORT=6379
  depends_on:
    - redis
  links:
    - redis
  volumes:
    - ./logs/besu/:/var/log/besu/

x-metricbeat-def:
  &metricbeat-def
  build: ./metricbeat
  environment:
    - ENV_NAME=dev
    - IP_ADDRESS=127.0.0.1
    - REDIS_HOST=redis
    - REDIS_PORT=6379
  depends_on:
    - redis
  links:
    - redis

{% endif %}

{% if monitoring == "splunk" %}
x-splunk-def:
  &splunk-def
  image: splunk/splunk:8.2
  container_name: splunk
  environment:
    - SPLUNK_START_ARGS=--accept-license
    - SPLUNK_HEC_TOKEN=11111111-1111-1111-1111-1111111111113
    - SPLUNK_PASSWORD=quickstart
    - SPLUNK_APPS_URL=https://github.com/splunkdlt/splunk-app-quorum/releases/download/1.0.6/splunk_app_quorum-v1.0.6.tgz
  ports:
    - 8000:8000
    - 8088:8088
  healthcheck:
    test: ['CMD', 'curl', '-f', 'http://localhost:8000']
    interval: 5s
    timeout: 5s
    retries: 20
  volumes:
    - ./splunk/splunk.yml:/tmp/defaults/default.yml
    - splunk:/opt/splunk/var

x-otelcollector-def:
  &otelcollector-def
  image: quay.io/signalfx/splunk-otel-collector:0.26.0
  container_name: otelcollector
  depends_on:
    - splunk
  command:
    - --config
    - /etc/otel/config.yaml
  volumes:
    - ./splunk/otel-collector-config.yml:/etc/otel/config.yaml
    - /var/log:/var/log
  environment:
    - SPLUNK_HEC_TOKEN=11111111-1111-1111-1111-1111111111113
    - SPLUNK_ACCESS_TOKEN=disable # You can use this option to send data to Splunk Cloud.
    - SPLUNK_REALM=disable # You can use this option to send data to Splunk Cloud.

x-ethlogger-def:
  &ethlogger-def
  image: ghcr.io/splunkdlt/ethlogger:3.0.1
  container_name: ethlogger
  environment:
    - COLLECT_PEER_INFO=true
    - COLLECT_PENDING_TX=true
    - ETH_RPC_URL=http://rpcnode:8545
    - NETWORK_NAME=quickstart
    - START_AT_BLOCK=latest
    - SPLUNK_HEC_URL=https://splunk:8088
    - SPLUNK_HEC_TOKEN=11111111-1111-1111-1111-1111111111113
    - SPLUNK_EVENTS_INDEX=ledger
    - SPLUNK_METRICS_INDEX=metrics
    - SPLUNK_INTERNAL_INDEX=metrics
    - SPLUNK_HEC_REJECT_INVALID_CERTS=false
    - ABI_DIR=/app/abis
    - DEBUG=ethlogger:platforms,ethlogger:eth
  volumes:
    - ethlogger:/app
    - ./smart_contracts/contracts:/app/abis
  depends_on:
    - splunk
  restart: unless-stopped


x-docker-logging:
  &docker-logging
  logging:
    driver: "splunk"
    options:
      splunk-token: "11111111-1111-1111-1111-1111111111113"
      splunk-url: "https://localhost:8088"
      splunk-index: "logs"
      splunk-insecureskipverify: "true"
      splunk-verify-connection: "false"
      splunk-format: "json"
      tag: "{% raw %}{{.Name}}-{{.ID}}{% endraw %}"
      splunk-sourcetype: "docker:logging"
      splunk-source: quorum-quickstart
{% endif %}

{% set anyRPCNode = nodeConfig | firstByAttr('type', 'rpc') %}

{% if enableETHSignerProxy and anyRPCNode %}
x-ethsignerProxy-def:
  &ethsignerProxy-def
  image: consensys/quorum-ethsigner:${QUORUM_ETHSIGNER_VERSION:-latest}
  command: [
    "--chain-id=1337",
    "--http-listen-host=0.0.0.0",
    "--downstream-http-port=8545",
    "--downstream-http-host=rpcnode",
    "file-based-signer",
    "-k",
    "/opt/ethsigner/keyfile",
    "-p",
    "/opt/ethsigner/passwordfile"
  ]
  ports:
    - 8545
{% endif %}

services:
{{ macros.proxies(nodeConfig) }}

{{ macros.firewalls(nodeConfig) }}

{{ macros.besuNodes(nodeConfig, privacyNodePort) }}

{% if enableETHSignerProxy and anyRPCNode %}
  ethsignerProxy:
    << : *ethsignerProxy-def
    volumes:
      - ./config/ethsigner/password:/opt/ethsigner/passwordfile
      - ./config/ethsigner/key:/opt/ethsigner/keyfile
    depends_on:
      - validator1
      - rpcnode
    ports:
      - 18545:8545/tcp
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.40
{% endif %}
{% endif %}

{% if not orchestrate and anyRPCNode %}
  explorer:
    build: block-explorer-light/.
    image: quorum-dev-quickstart/block-explorer-light:develop
    depends_on:
      - {{ anyRPCNode.name}}
    ports:
      - 25000:80/tcp
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.31
{% endif %}

{% if metrics and monitoring != "splunk" %}
  prometheus:
    image: "prom/prometheus"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090/tcp
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.32
{% endif %}

  grafana:
    image: "grafana/grafana"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
    volumes:
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana:/var/lib/grafana
    ports:
      - 3000:3000/tcp
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.33
{% endif %}
{% endif %}
{% endif %}

{% if monitoring == "elk" %}
  redis:
    << : *redis-def
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.34
{% endif %}

  elasticsearch:
    << : *elasticsearch-def
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.35
{% endif %}

  kibana:
    << : *kibana-def
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.36
{% endif %}

  logstash:
    << : *logstash-def
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.37
{% endif %}

  filebeat:
    << : *filebeat-def
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.38      
{% endif %}

  metricbeat:
    << : *metricbeat-def
    networks:
      {{defaultNetwork}}:
{% if not enableDNS %}
        ipv4_address: 172.16.239.39 
{% endif %}

{% endif %}

{% if monitoring == "splunk" %}
  splunk:
    << : *splunk-def
    networks:
      quorum-dev-quickstart:
{% if not enableDNS %}
        ipv4_address: 172.16.239.34
{% endif %}

  otelcollector:
    << : *otelcollector-def
    << : *docker-logging
    networks:
      quorum-dev-quickstart:
{% if not enableDNS %}
        ipv4_address: 172.16.239.35
{% endif %}

  ethlogger:
    << : *ethlogger-def
    << : *docker-logging
    networks:
      quorum-dev-quickstart:
{% if not enableDNS %}
        ipv4_address: 172.16.239.36
{% endif %}

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.39.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - {{dockerRootDir}}:/var/lib/docker:ro
    command:
      - --docker_only=true
    networks:
      quorum-dev-quickstart:
{% if not enableDNS %}
        ipv4_address: 172.16.239.37
{% endif %}
{% endif %}

volumes:
  public-keys:
  prometheus:
  grafana:
  cakeshop:
{%- if privacy %}
{% for node in nodeConfig | byAttr('type', 'member') %}
{%- set privacynode = nodeConfig | firstByAttr('name', node.privacynode) %}
{%- if "tessera" == privacynode.type %}
  {{node.name}}tessera:
{%- endif %}
{% endfor %}
{%- endif %}
  splunk:
  ethlogger:


networks:
{% for network in networks %}
  {{network}}:
    driver: bridge
{%- if not enableDNS %}
    ipam:
      config:
        - subnet: 172.16.239.0/24
{% endif %}
{% endfor %}
